apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-acs-token-generator
  annotations:
    policy.open-cluster-management.io/standards: DevOps
    policy.open-cluster-management.io/categories: SecOps
    policy.open-cluster-management.io/controls: ACS CLI Token
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-acs-token-generator-rbac
        spec:
          remediationAction: inform
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  annotations:
                    argocd.argoproj.io/sync-wave: "1"
                  name: pipeline-create-secrets
                  namespace: stackrox
                rules:
                  - apiGroups:
                      - ""
                    resources:
                      - secrets
                    verbs:
                      - get
                      - create
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: pipeline-create-secrets
                  namespace: stackrox
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: pipeline-create-secrets
                subjects:
                  - kind: ServiceAccount
                    name: pipeline
                    namespace: stackrox
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-acs-token-generator-pipeline
        spec:
          remediationAction: inform
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: tekton.dev/v1beta1
                kind: Task
                metadata:
                  name: create-api-token-secret
                  namespace: stackrox
                spec:
                  params:
                    - description: The namespace to create the stackrox secret in.
                      name: NAMESPACE
                      type: string
                    - default: latest
                      description: The OpenShift Version to use
                      name: VERSION
                      type: string
                  steps:
                    - env:
                        - name: PASSWORD
                          valueFrom:
                            secretKeyRef:
                              key: password
                              name: central-htpasswd
                      image: 'quay.io/pittar/tekton-oc-toolbox:$(params.VERSION)'
                      name: create-api-token-and-secret
                      resources: {}
                      script: >
                        # If secret already exists, don't regenerate.

                        if [[ -n `oc get secret roxsecrets -n $(params.NAMESPACE) 2>/dev/null` ]] ;
                        then
                            echo "Stackrox token secret already exists in $(params.NAMESPACE)."                            
                            exit 0
                        fi

                        # Wait for central to be ready
                        attempt_counter=0
                        max_attempts=20
                        echo "Waiting for central to be available..." 

                        until $(curl -k --output /dev/null --silent --head --fail https://central); do
                            
                            if [ ${attempt_counter} -eq ${max_attempts} ];then
                              echo "Max attempts reached"
                              exit 1
                            fi

                            printf '.'
                            attempt_counter=$(($attempt_counter+1))
                            echo "Made attempt $attempt_counter, waiting..."
                            sleep 10
                        done

                        CENTRAL_URL="`oc -n stackrox get route central -o go-template='{{.spec.host}}'`"


                        API_ENDPOINT="/v1/apitokens/generate"

                        CENTRAL_URL_API="https://$CENTRAL_URL$API_ENDPOINT"

                        echo "$CENTRAL_URL_API"

                        PAYLOAD="{\"name\": \"$(params.NAMESPACE)\", \"role\": \"Continuous Integration\"}" 

                        echo "$PAYLOAD"

                        echo "Generate new token."

                        RESPONSE=$(curl -k \
                          -X POST -u "admin:$PASSWORD" \
                          -H "Content-Type: application/json" \
                          --data "$PAYLOAD" \
                          $CENTRAL_URL_API)

                        TOKEN=$(jq -r '.token' <<< "$RESPONSE")

                        # Create secret in target namespace.

                        oc create secret generic roxsecrets \
                          --from-literal=rox_central_endpoint=$CENTRAL_URL:443 \
                          --from-literal=rox_api_token=$TOKEN \
                          -n $(params.NAMESPACE)
            - complianceType: musthave
              objectDefinition:
                apiVersion: tekton.dev/v1beta1
                kind: Pipeline
                metadata:
                  name: stackrox-token-secret-pipeline
                  namespace: stackrox
                spec:
                  params:
                    - name: NAMESPACE
                      type: string
                      description: Namespace that needs a StackRox token secret.
                  tasks:
                    - name: create-api-token-secret
                      params:
                        - name: NAMESPACE
                          value: $(params.NAMESPACE)
                        - name: VERSION
                          value: latest
                      taskRef:
                        kind: Task
                        name: create-api-token-secret
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-acs-token-generator
placementRef:
  name: placement-policy-acs-token-generator
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-acs-token-generator
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-acs-token-generator
spec:
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - key: devops-tools
        operator: In
        values:
          - "true"
